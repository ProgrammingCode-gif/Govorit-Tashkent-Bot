require('dotenv').config()

const TelegramBotApi = require('node-telegram-bot-api')

const { keyboards } = require('./keyboards.js')
const { getMessageInfo, getQueryInfo, sortDates, splitMessage } = require('./utils.js')
const { DB } = require('./db.js')

const db = new DB(process.env.DB_URL)
const bot = new TelegramBotApi(process.env.BOT_TOKEN, { polling: true })

bot.setMyCommands([
    { command: '/start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' }
])

bot.onText('/start', async (ctx) => {
    const [chatId, , userId] = getMessageInfo(ctx)
    const user = await db.getUsersById(userId)

    if (user.isAdmin) {
        return bot.sendPhoto(chatId, './public/img/startAdmin.jpg', keyboards.startAdminKeyboard)
    }
    return bot.sendPhoto(chatId, './public/img/start.jpg', keyboards.startGuideKeyboard)
})

bot.onText('–ú–µ—Ä—á', async (ctx) => {
    const [chatId, userName, userId] = getMessageInfo(ctx)

    const user = await db.getUsersById(userId)
    let message = `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã–π –º–µ—Ä—á –Ω–∞–∂–∞–≤ –Ω–∞ –∑–Ω–∞—á–æ–∫ ¬´+¬ª\n\n–ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –≤—ã —É–ø–æ—Ä–Ω—ã–º —Ç—Ä—É–¥–æ–º –ø—Ä–æ–¥–∞–ª–∏:\n\n${user.bags} —à–æ–ø–ø–µ—Ä–æ–≤ üí∞\n${user.stickers} —Å—Ç–∏–∫–µ—Ä–æ–≤ üí∏`

    bot.sendMessage(chatId, message, keyboards.merchGuideKeyboard)
})

bot.onText('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã—Ö–æ–¥—ã', async (ctx) => {
    const [chatId, userName, userId] = getMessageInfo(ctx)
    const userWalkings = await db.findUserWalkings(userId)
    const userWalkingsSorted = sortDates(userWalkings)
    const user = await db.getUsersById(userId)
    let guideWalkingsText = ''
    let message = ''


    if (user.isAdmin) {
        const walkings = await db.findAllWalkings()
        const walkingsSorted = sortDates(walkings)
        walkingsSorted.forEach(walking => guideWalkingsText += `${walking.date}, –í—Ä–µ–º—è: ${walking.time}, –¶–µ–Ω–∞: ${walking.price}, –ì–∏–¥: ${walking.guideName}${walking.comment ? `\n${walking.comment}` : ''}\n\n`)
        message = walkings.length > 0 ? `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—ã—Ö–æ–¥—ã üë∑‚Äç‚ôÇÔ∏è:\n\n${guideWalkingsText}` : '–ë–æ—Å—Å, –∏–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –µ—â–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ ü§∑‚Äç‚ôÇÔ∏è'

        const splitedMessage = splitMessage(message)

        splitedMessage.forEach(msg => bot.sendMessage(chatId, msg))

        return
    }

    userWalkingsSorted.forEach(walking => guideWalkingsText += `${walking.date}, –í—Ä–µ–º—è: ${walking.time}, –¶–µ–Ω–∞: ${walking.price}${walking.comment ? `\n${walking.comment}` : ''}\n\n`)
    message = userWalkings.length > 0 ? `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—ã—Ö–æ–¥—ã üë∑‚Äç‚ôÇÔ∏è:\n\n${guideWalkingsText}` : '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å ! üíÜ‚Äç‚ôÇÔ∏è'
    const splitedMessage = splitMessage(message)

    splitedMessage.forEach(msg => bot.sendMessage(chatId, msg))
})

bot.onText('–î–æ–±–∞–≤–∏—Ç—å –≤—ã—Ö–æ–¥', async (ctx) => {
    const [chatId] = getMessageInfo(ctx)
    bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–°–æ–∑–¥–∞—Ç—å: –¥–∞—Ç–∞(dd.mm.yy), –≤—Ä–µ–º—è(hh:mm), —Ü–µ–Ω–∞, –≥–∏–¥, –∫–æ–º–µ–Ω—Ç')
})

bot.onText('–£–¥–∞–ª–∏—Ç—å –≤—ã—Ö–æ–¥', async (ctx) => {
    const [chatId] = getMessageInfo(ctx)
    bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–£–¥–∞–ª–∏—Ç—å: –¥–∞—Ç–∞(dd.mm.yy), –≤—Ä–µ–º—è(hh:mm), –ì–∏–¥')
})

bot.onText('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ö–æ–¥', async (ctx) => {
    const [chatId] = getMessageInfo(ctx)
    bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ò–∑–º–µ–Ω–∏—Ç—å: –¥–∞—Ç–∞(dd.mm.yy), –≤—Ä–µ–º—è(hh:mm), –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è(hh:mm), –Ω–æ–≤–∞—è —Ü–µ–Ω–∞, –Ω–æ–≤—ã–π –≥–∏–¥, –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π')
})

bot.on('callback_query', async (ctx) => {
    const [chatId, , userId, data] = getQueryInfo(ctx)
    const merchMessageId = ctx.message.message_id

    if (data == 'addStickers') {
        const response = await db.updateUsersMerchStatus(userId, 'addStickers')
        if (response == 1) {
            bot.sendMessage(chatId, '–°—Ç–∏–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –¢—ã –º–æ–ª–æ–¥–µ—Ü üëè')
        } else {
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à–æ–ø–µ—Ä–∞ ‚≠ïÔ∏è')
        }
    }

    if (data == 'addBag') {
        const response = await db.updateUsersMerchStatus(userId, 'addBag')
        if (response == 1) {
            bot.sendMessage(chatId, '–®–æ–ø–ø–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –æ—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üôå')
        } else {
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à–æ–ø–µ—Ä–∞ ‚≠ïÔ∏è')

        }
    }

    if (data == 'deleteStickers') {
        const response = await db.updateUsersMerchStatus(userId, 'deleteStickers')
        if (response == 1) {
            bot.sendMessage(chatId, '–°—Ç–∏–∫–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã‚úÖ')
        } else {
            bot.sendMessage(chatId, '–£ –≤–∞—Å –∏ —Ç–∞–∫ 0 —Å—Ç–∏–∫–µ—Ä–æ–≤ ;(')
        }
    }

    if (data == 'deleteBag') {
        const response = await db.updateUsersMerchStatus(userId, 'deleteBag')
        if (response == 1) {
            bot.sendMessage(chatId, '–®–æ–ø–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω‚úÖ')
        } else {
            bot.sendMessage(chatId, '–£ –≤–∞—Å –∏ —Ç–∞–∫ 0 —à–æ–ø–µ—Ä–æ–≤ ;(')
        }
    }

    const user = await db.getUsersById(userId)

    bot.editMessageText(`–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω—ã–π –º–µ—Ä—á –Ω–∞–∂–∞–≤ –Ω–∞ –∑–Ω–∞—á–æ–∫ ¬´+¬ª\n\n–ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –≤—ã —É–ø–æ—Ä–Ω—ã–º —Ç—Ä—É–¥–æ–º –ø—Ä–æ–¥–∞–ª–∏:\n\n${user.bags} —à–æ–ø–ø–µ—Ä–æ–≤ üí∞\n${user.stickers} —Å—Ç–∏–∫–µ—Ä–æ–≤ üí∏`, { chat_id: chatId, message_id: merchMessageId, reply_markup: keyboards.merchGuideKeyboard.reply_markup })
})

bot.onText(/–°–æ–∑–¥–∞—Ç—å:/, async (ctx) => {
    const [chatId, , userId] = getMessageInfo(ctx)
    const user = await db.getUsersById(userId)

    if (user.isAdmin) {

        const [date, time, price, guideName, comment] = ctx.text.substring(9).split(', ')
        if (date && time && price && guideName) {
            const response = await db.createNewWalking(date, time, price, guideName, comment)

            if (response) {
                bot.sendMessage(chatId, '–í—ã—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!‚úÖ')
                return
            } else {
                bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—ã—Ö–æ–¥–∞‚≠ïÔ∏è')
            }
            return
        } else {
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ!')
            return
        }
    }
    bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã‚ùå')
})

bot.onText(/–£–¥–∞–ª–∏—Ç—å:/, async (ctx) => {
    const [chatId, , userId] = getMessageInfo(ctx)
    const user = await db.getUsersById(userId)

    if (user.isAdmin) {

        const [date, time, guideName] = ctx.text.substring(9).split(', ')

        if (date && time && guideName) {

            const response = await db.deleteWalking(date, time, guideName)
            if (response) {
                bot.sendMessage(chatId, '–í—ã—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω ‚úÖ')
                return
            }

            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞‚≠ïÔ∏è')
            return

        } else {
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!')
            return
        }
    }

    bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã‚ùå')
})

bot.onText(/–ò–∑–º–µ–Ω–∏—Ç—å:/, async (ctx) => {
    const [chatId, , userId] = getMessageInfo(ctx)
    const user = await db.getUsersById(userId)

    if (user.isAdmin) {
        const [date, time, newTime, price, guideName, comment] = ctx.text.substring(10).split(', ')

        if (date && time && newTime && price && guideName) {
            const response = await db.changeWalking(date, time, newTime, price, guideName, comment)

            if (response) {
                bot.sendMessage(chatId, '–í—ã—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω‚úÖ')
                return
            }
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—ã—Ö–æ–¥–∞‚≠ïÔ∏è')
            return
        } else {
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ!')
            return
        }
    }
    bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã‚ùå')
})